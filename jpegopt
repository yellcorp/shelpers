#!/usr/bin/env python


from __future__ import division, print_function

from shelper import print_error

import argparse
import os
import subprocess
import sys
import tempfile


EXIT_CODE_UNEXPECTED = 65


def get_arg_parser():
    p = argparse.ArgumentParser(
        description = """\
            Use jpegtran to optimize JPEG image files
            in-place."""
    )

    p.add_argument(
        "paths",
        nargs = "+",
        help = "The jpeg files to optimize",
        metavar = "PATH"
    )

    return p


CHUNK_SIZE = 0x10000
def copy_file(src_file, dest_path):
    with open(dest_path, "wb") as dest_file:
        while True:
            chunk = src_file.read(CHUNK_SIZE)
            if len(chunk) == 0:
                break
            dest_file.write(chunk)


def jpegopt_with_tempfile(path, temp_file):
    try:
        input_size = os.path.getsize(path)
    except EnvironmentError as env_err:
        print_error("Could not get file size.", env_err, path)
        input_size = None

    if path[0] == "-":
        use_path = "./%s" % path
    else:
        use_path = path

    exit_code = subprocess.call(
        ("jpegtran", "-copy", "none", "-optimize", use_path),
        stdout = temp_file
    )

    if exit_code != 0:
        print_error("jpegtran failed.", subject_file = path)

    replace = True
    if input_size is not None:
        output_size = temp_file.tell()
        if output_size >= input_size:
            replace = False
            print_error("File increased in size. Not replacing.", subject_file = path)

    if replace:
        try:
            temp_file.seek(0)
            copy_file(temp_file, path)
        except EnvironmentError as env_err:
            print_error("Could not replace file.", env_err, path)
            exit_code = 1

    return exit_code


def jpegopt(path):
    temp_fd, temp_path = tempfile.mkstemp(suffix = ".jpg")
    temp_file = os.fdopen(temp_fd, "w+b")
    temp_fd = None

    try:
        return jpegopt_with_tempfile(path, temp_file)
    finally:
        temp_file.close()
        try:
            os.remove(temp_path)
        except EnvironmentError as env_err:
            print_error("Could not delete temp file.", env_err, temp_path)


def main():
    config = get_arg_parser().parse_args()
    try:
        max_code = max(jpegopt(path) for path in config.paths)
    except StandardError as error:
        print_error("Unexpected error.", error)
        return EXIT_CODE_UNEXPECTED
    return max_code


if __name__ == "__main__":
    sys.exit(main())
