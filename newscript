#!/usr/bin/env python


from __future__ import division, print_function


import argparse
import os
import stat
import subprocess


def get_arg_parser():
	p = argparse.ArgumentParser(
		description = """\
			Create a new script with the given interpreter name and execute
			bits set.
		"""
	)

	p.add_argument(
		"script_path",
		help = """\
			The path to the script file to be created. By default, will not
			overwrite the file if present.
		"""
	)

	p.add_argument(
		"interpreter",
		nargs = "?",
		default = "sh",
		help = """\
			The interpreter to place in the shebang line. If this is not an
			absolute path, the system path will be searched and the absolute
			path of the result used.
		"""
	)

	p.add_argument(
		"interpreter_args",
		nargs = "*",
		help = """\
			Arguments to pass to the interpreter on the shebang line.
		"""
	)

	p.add_argument(
		"--force", "-f",
		action = "store_true",
		help = """\
			Overwrite the output path if it exists.
		"""
	)

	return p


ALL_EXECUTE = stat.S_IXUSR | stat.S_IXGRP | stat.S_IXOTH


def resolve_exec(executable):
	if os.path.isabs(executable):
		return executable

	return subprocess.check_output(("which", executable)).rstrip()


def main():
	args = get_arg_parser().parse_args()
	interpreter = resolve_exec(args.interpreter)

	shebang = [ "#!%s" % interpreter ] + args.interpreter_args

	open_flags = os.O_WRONLY | os.O_CREAT
	if not args.force:
		open_flags |= os.O_EXCL

	fd = os.open(args.script_path, open_flags)
	with os.fdopen(fd, "w") as writer:
		print(" ".join(shebang), file = writer)

	script_stat = os.stat(args.script_path)
	os.chmod(args.script_path, stat.S_IMODE(script_stat.st_mode) | ALL_EXECUTE)


if __name__ == "__main__":
	main()
