# Usage: python install

# Will edit one of your shell startup files to add the parent directory of this
# file to your PATH, and source every init-* file in ./profile.d/
# 
# For bash, edits .bash_profile
# For zsh, edits .zshrc
#
# Proposed edits are shown before prompting for confirmation.


from __future__ import division, print_function

import os
import sys


try:
	read_input = raw_input
except NameError:
	read_input = input


SHELLS = dict(
	bash=dict(startup_file='~/.bash_profile'),
	zsh=dict(startup_file='~/.zshrc'),
)
def detect_shell():
	shell = os.environ.get('SHELL', None)
	if not shell:
		return None
	return os.path.basename(shell)


def bool_prompt(prompt):
	use_prompt = str(prompt)
	while True:
		response = read_input(use_prompt)
		if len(response) >= 1:
			char = response[0].lower()
			if char == "y":
				return True
			if char == "n":
				return False
		use_prompt = " * Please type y or n: "


def shell_quote(text):
	return "'%s'" % text.replace("'", "'\\''")


def main():
	me = os.path.realpath(sys.argv[0])
	here = os.path.dirname(me)

	if ":" in here:
		print("""\
Scripts cannot be run from here because the path name contains a colon (':').
This prevents it from being added to $PATH.""")
		return 2

	shell_name = detect_shell()
	if not shell_name:
		print("""\
Couldn't detect which shell you are using, because the SHELL var isn't set.""")
		return 2

	shell_info = SHELLS.get(shell_name, None)
	if shell_info is None:
		print("The {!r} shell is not supported.".format(shell_name))
		return 2

	home = os.environ.get("HOME")
	if home is not None and here.startswith(home):
		payload_sq = "\"$HOME\"%s" % shell_quote(here[len(home):])
	else:
		payload_sq = shell_quote(here)
	
	self_id = "%s/%s" % (payload_sq, os.path.basename(me))

	lines = [
		'PATH="$PATH":%s' % payload_sq,
		'export PATH',
		'for file in %s/profile.d/init-*; do' % payload_sq,
		'\t[ -r "$file" ] && . "$file"',
		'done',
	]

	startup_file = os.path.expanduser(shell_info['startup_file'])

	if not os.path.exists(startup_file):
		print("The file %r will be created." % startup_file)

	print("The following lines will be added to %r:" % startup_file)
	print()
	for line in lines:
		print(line)
	
	print()
	try:
		proceed = bool_prompt("Continue? (y/n) ")
	except EOFError:
		proceed = False

	if not proceed:
		print("Canceled")
		return 1

	lines[0:0] = [
		"",
		"# Following %d lines added by %s" % (len(lines), self_id)
	]

	with open(startup_file, "a") as profile_stream:
		for line in lines:
			print(line, file = profile_stream)
	
	print("Installed")
	return 0


sys.exit(main())
